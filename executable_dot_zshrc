#!/usr/bin/zsh
# vi: ft=zsh

if [[ $0 == 'ksh' ]] || [[ $0 == 'sh' ]]; then
  echo "weird"
  source "$HOME/.shrc" && exit
elif [[ $0 == 'bash' ]]; then
  echo "weird"
  source "$HOME/.bashrc" && exit
fi

# }}}1

# Begin .zshrc benchmarks {{{1

# To run zprof, execute
#
#   env ZSH_PROF='' zsh -ic zprof
# (( $+ZSH_PROF )) && zmodload zsh/zprof
DOZOPROF=false
[[ true == $DOZOPROF ]] && zmodload zsh/zprof



[[ -f ~/.shrc ]] && source ${HOME}/.shrc

export XDG_CONFIG_HOME="$HOME/.config"
export UPDATE_INTERVAL=15
export ZSH="~/.zsh"
zmodload zsh/curses


# zinit ice compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'
# zinit light nailshard/pure
# ☄
### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zinit-zsh/z-a-unscope \
    zinit-zsh/z-a-rust \
    zinit-zsh/z-a-as-monitor \
    zinit-zsh/z-a-patch-dl \
    zinit-zsh/z-a-submods \
    zinit-zsh/z-a-bin-gem-node


# lib/git.zsh is loaded mostly to stay in touch with the plugin (for the users)
# and for the themes 2 & 3 (lambda-mod-zsh-theme & lambda-gitster)
# zinit wait lucid for \
#         zdharma/zsh-unique-id \
#         PZTM::archive \
#         PZTM::directory \
#         PZTM::utility
# zinit light denysdovhan/spaceship-prompt
eval "$(starship init zsh)"
# zinit light rkoder/clarity.zsh


zt()  { zinit depth'3' lucid ${1/#[0-9][a-c]/wait"$1"} "${@:2}"; }
zct() {
    thmf="${ZINIT[PLUGINS_DIR]}/_local---config-files/themes"
    if [[ ${1} != ${MYPROMPT=p10k} ]] && { ___turbo=1; .zinit-ice \
    load"[[ \${MYPROMPT} = ${1} ]]" unload"[[ \${MYPROMPT} != ${1} ]]" }
    .zinit-ice atload'! [[ -f "${thmf}/${MYPROMPT}-post.zsh" ]] && source "${thmf}/${MYPROMPT}-post.zsh"' \
    nocd id-as"${1}-theme";
    ICE+=("${(kv)ZINIT_ICES[@]}"); ZINIT_ICES=();
}

##########################
# General ZSH Settings   #
##########################
bindkey -v 
bindkey -M vicmd "q" push-line
typeset -g HISTSIZE=290000 SAVEHIST=290000 HISTFILE=~/.zhistory
setopt hist_ignore_dups
setopt extended_history       # Save time stamps and durations
setopt hist_expire_dups_first
setopt inc_append_history
setopt share_history
# setopt HISTORY_IGNORE="(ls|[bf]g|exit|reset|clear|cd|cd ..|cd..)"

setopt interactive_comments
setopt octal_zeroes
setopt no_prompt_cr
setopt complete_in_word
setopt auto_menu
setopt auto_pushd
setopt pushd_ignore_dups
setopt glob_complete
setopt glob_dots
setopt c_bases
setopt numeric_glob_sort
setopt promptsubst
setopt no_auto_cd
setopt rc_quotes
setopt extendedglob
setopt notify

# setopt no_always_to_end  append_history list_packed
zmodload -i zsh/complist
autoload -Uz allopt zed zmv zcalc colors
colors
autoload -Uz edit-command-line
zle -N edit-command-line

autoload -Uz select-word-style
select-word-style shell

autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic
##########################
# Programs/Binaries  s   #
##########################
zinit lucid wait for agkozak/zhooks 
#
# zsh-titles causes dittography in Emacs shell and Vim terminal
if (( ! $+EMACS )) && [[ $TERM != 'dumb' ]] && (( ! $+VIM_TERMINAL )); then
    zinit lucid wait for jreese/zsh-titles
fi

zinit lucid wait'1' for zdharma/zbrowse
zinit wait"2" lucid for \
    zdharma/declare-zsh \
 trigger-load'!crasis' \
    zdharma/zinit-crasis 

##########################
# OMZ Libs and Plugins   #
##########################
zinit lucid for atinit"HIST_STAMPS=dd.mm.yyyy" OMZL::history.zsh 

if [[ -z "$SSH_CONNECTION" && -z $TMUX ]]; then
    tmux new -P
    # ZSH_TMUX_FIXTERM=true
    # ZSH_TMUX_AUTOSTART=true
    # ZSH_TMUX_AUTOSTART_ONCE=false
    # ZSH_TMUX_AUTOCONNECT=false
    # zinit load zpm-zsh/tmux
fi


# zinit wait lucid light-mode for \
zt light-mode for \
	OMZL::clipboard.zsh \
    trigger-load'!man' \
      ael-code/zsh-colored-man-pages \
	OMZL::compfix.zsh \
	OMZL::correction.zsh \
    atload"
        alias ..='cd ..'
        alias ...='cd ../..'
        alias ....='cd ../../..'
        alias .....='cd ../../../..'
    " \
	OMZL::directories.zsh \
    trigger-load'!x' \
      OMZP::extract \
	OMZL::git.zsh \
	OMZL::grep.zsh \
	OMZL::key-bindings.zsh \
	OMZL::spectrum.zsh \
	OMZL::termsupport.zsh \
    atload"
        alias gcd='gco dev'
    " \
	OMZP::git \
	OMZP::fzf \
    OMZP::fasd \
    atload"
        alias dcupb='docker-compose up --build'
    " \
	OMZP::docker-compose \
	as"completion" \
    OMZP::docker/_docker \
    trigger-load'!updatelocal' blockf \
      NICHOLAS85/updatelocal \
    djui/alias-tips \
    softmoth/zsh-vim-mode \
    trigger-load'!gencomp' pick'zsh-completion-generator.plugin.zsh' blockf \
          atload'\
            alias gencomp="zinit silent nocd as\"null\" wait\"2\" \
              atload\"zinit creinstall -q _local/config-files; zicompinit\" \
              for /dev/null; gencomp"' \
      RobSis/zsh-completion-generator 


#####################
# PLUGINS           #
#####################
#

zt 0a light-mode for \
    OMZL::completion.zsh \
    OMZP::pip \
    if'false' ver'dev' \
        marlonrichert/zsh-autocomplete \
    has'systemctl' \
        OMZP::systemd/systemd.plugin.zsh \
    OMZP::sudo/sudo.plugin.zsh  \
    compile'{src/*.zsh,src/strategies/*}' pick'zsh-autosuggestions.zsh' \
    pick'fz.sh' atload'ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(autopair-insert __fz_zsh_completion)' \
        changyuheng/fz 

zt 0b light-mode for \
  autoload'#manydots-magic' \
    knu/zsh-manydots-magic \
  OMZP::command-not-found/command-not-found.plugin.zsh \
  MichaelAquilina/zsh-autoswitch-virtualenv \
  # pick'autopair.zsh' nocompletions atload'bindkey "^H" backward-kill-word; \
  #   ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(autopair-insert)' \
  #   hlissner/zsh-autopair
  # pick'autoenv.zsh' nocompletions \
  #   Tarrasch/zsh-autoenv \
# remark
zinit pack for remark

if [[ 'x86_64' == "$(uname -m)" ]]; then
    zinit ice from'gh-r' as'program'
    zinit light sei40kr/fast-alias-tips-bin
    zinit light sei40kr/zsh-fast-alias-tips
fi
zinit light ptavares/zsh-direnv
zinit ice pick'init.zsh' blockf
zinit light laggardkernel/git-ignore
alias gi="git-ignore"

# zinit ice wait"1" lucid
zinit load psprint/zsh-navigation-tools
zinit load agkozak/zsh-z
zinit lucid wait for zdharma/zui

# zinit ice atclone'PYENV_ROOT="$HOME/.pyenv" ./libexec/pyenv init - > zpyenv.zsh' \
#     atinit'export PYENV_ROOT="$HOME/.pyenv"' atpull"%atclone" \
#     as'command' pick'bin/pyenv' src"zpyenv.zsh" nocompile'!'
zinit light pyenv/pyenv


# zinit ice from"gh-r" as"program" mv"shfmt* -> shfmt"
# zinit light mvdan/sh

# zinit ice as"program" pick"yank" make
# zinit light mptre/yank

# zinit ice wait"2" lucid as'command' pick'src/vramsteg' \
#     atclone'cmake .' atpull'%atclone' make  # use Turbo mode
# zinit light psprint/vramsteg-zsh


zinit wait lucid for \
    \
    light-mode lukechilds/zsh-nvm \
    hlissner/zsh-autopair \
    \
    light-mode asciinema/asciinema \
    \
    pick'fz.sh' \
    light-mode zdharma/zzcomplete \
    \
    light-mode zdharma/zsh-lint \
    \
    light-mode zsh-users/zsh-history-substring-search
# Fast-syntax-highlighting & autosuggestions
zinit wait lucid for \
 atinit"ZINIT[COMPINIT_OPTS]=-C; zpcompinit; zpcdreplay" \
    zdharma/fast-syntax-highlighting \
 atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions \
 blockf \
    zsh-users/zsh-completions


#####################
# SETTINGS          #
#####################
setopt COMPLETE_ALIASES
autoload -Uz compinit
compinit -u -d $compdump

HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='underline'
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND=''
zle -N history-substring-search-up
zle -N history-substring-search-down

# Use Esc-K for run-help
bindkey -M vicmd '?' run-help
bindkey -M vicmd '^[' sudo-command-line
zmodload zsh/complist
bindkey '^[OA' history-substring-search-up
bindkey '^[OB' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
bindkey -M menuselect 'h' vi-backward-char        # left
bindkey -M menuselect 'k' vi-up-line-or-history   # up
bindkey -M menuselect 'l' vi-forward-char         # right
bindkey -M menuselect 'j' vi-down-line-or-history # bottom


# Allow v to edit the command line
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd 'v' edit-command-line


# Borrowed from emacs mode
bindkey '^R' history-incremental-search-backward
# setopt NO_FLOW_CONTROL                          # Or the next command won't work
bindkey '^S' history-incremental-search-forward


# zstyle ':completion::complete:*' gain-privileges 1
# Customize to your needs...
# zstyle ':completion:*' use-cache on
# zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' menu select
zstyle ':completion:*' rehash true
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' \
    select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:descriptions' format '-- %d --'
# zstyle ':completion:*:processes' command 'ps -au$USER'
zstyle ':completion:complete:*:options' sort false
zstyle ':fzf-tab:complete:_zlua:*' query-string input
zstyle ':completion:*:*:*:*:processes' \
    command 'ps -u $USER -o pid,user,comm,cmd -w -w'
zstyle ':fzf-tab:complete:kill:argument-rest' extra-opts \
    --preview=$extract'ps --pid=$in[(w)1] -o cmd \
    --no-headers -w -w' --preview-window=down:3:wrap
zstyle ':fzf-tab:complete:cd:*' extra-opts \
    --preview=$extract'exa -1 --color=always ${~ctxt[hpre]}$in' 

zstyle :history-search-multi-word page-size 10
zstyle :history-search-multi-word highlight-color fg=red,bold
zstyle :plugin:history-search-multi-word reset-prompt-protect 1
#
FZF_DEFAULT_OPTS="
--border
--height 80%
--extended
--ansi
--reverse
--cycle
--bind ctrl-s:toggle-sort
--bind 'alt-e:execute($EDITOR {} >/dev/tty </dev/tty)'
--preview \"(bat --color=always {} || ls -l --color=always {}) 2>/dev/null | head -200\"
--preview-window right:60%
"
FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git 2>/dev/null"

AUTO_LS_COMMANDS="colorls"
AUTO_LS_NEWLINE=false

FZ_HISTORY_CD_CMD=zshz
ZSHZ_CMD="" # Don't set the alias, fz will cover that
ZSHZ_UNCOMMON=1
# 10ms for key sequences
KEYTIMEOUT=1
alias which &> /dev/null && unalias which
alias grep='grep  --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'
alias ls=lsd
alias dmsg=dmesg --color=auto --reltime --human --nopager --decode
alias free=free -mht

# While tinkering with ZSH-z
if (( SHLVL == 1 )); then
  [[ ! -d ${HOME}/.zbackup ]] && mkdir "${HOME}/.zbackup"
  cp "${HOME}/.z" "${HOME}/.zbackup/.z_${EPOCHSECONDS}" 2> /dev/null
fi

[[ true == $DOZOPROF ]] && zprof && zmodload -u zsh/zprof

[[ -d ~/.cargo ]] && source ~/.cargo/env
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
\
export PATH="/home/tom/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
